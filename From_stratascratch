--You have been asked to find the job titles of the highest-paid employees.
--Your output should include the highest-paid title or multiple titles with the same salary.
SELECT worker_title
FROM title
JOIN worker
ON worker_ref_id = worker_id
WHERE salary IN (
                SELECT MAX(salary)
                FROM worker);
                
                
--Meta/Facebook Messenger stores the number of messages between users in a table named 'fb_messages'. 
--In this table 'user1' is the sender, 'user2' is the receiver, and 'msg_count' is the number of messages exchanged between them.
--Find the top 10 most active users on Meta/Facebook Messenger by counting their total number of messages sent and received. 
--Your solution should output usernames and the count of the total messages they sent or received
WITH tmp_view AS
  (SELECT id,
          user1 AS userid,
          msg_count
   FROM fb_messages

   UNION 

   SELECT id,
          user2 AS userid,
          msg_count
   FROM fb_messages)

SELECT userid,
       sum(msg_count) as total_msgs
FROM tmp_view
GROUP BY userid
ORDER BY total_msgs DESC
LIMIT 10

**Finding Updated Records
--We have a table with employees and their salaries, however, some of the records are old and contain outdated salary information. 
--Find the current salary of each employee assuming that salaries increase each year. Output their id, first name, last name, 
--department ID, and current salary. Order your list by employee ID in ascending order.
SELECT id, first_name, last_name, department_id,MAX(salary) AS max_salary 
FROM ms_employee_salary
GROUP BY id, first_name, last_name, department_id
ORDER BY id;


** Bikes Last Used
--Find the last time each bike was in use. Output both the bike number and the date-timestamp of the bike's last use (i.e., the date-time the bike was returned). 
--Order the results by bikes that were most recently used.
SELECT bike_number, MAX(end_time) AS last_used  
FROM dc_bikeshare_q1_2012
GROUP BY bike_number;


**Number Of Units Per Nationality
--Find the number of apartments per nationality that are owned by people under 30 years old.
--Output the nationality along with the number of apartments.
--Sort records by the apartments count in descending order.
SELECT h.nationality, COUNT(DISTINCT u.unit_id) 
FROM airbnb_hosts h
JOIN  airbnb_units u ON h.host_id = u.host_id
WHERE h.age<30 AND unit_type = 'Apartment'
GROUP BY h.nationality;


** Top Ranked Songs
--Find songs that have ranked in the top position. Output the track name and the number of times it ranked at the top. 
--Sort your records by the number of times the song was in the top position in descending orde
SELECT trackname, COUNT(trackname) as times_top1
FROM spotify_worldwide_daily_song_ranking
WHERE position = 1
GROUP BY trackname
ORDER BY times_top1 DESC;
